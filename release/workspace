#!/usr/bin/env bash
# This script was generated by bashly 1.2.10 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
workspace_usage() {
  printf "workspace - CLI that provides functionality for installing and configuring workspace for a software engineer/DevOps.\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace COMMAND\n"
  printf "  workspace [COMMAND] --help | -h\n"
  printf "  workspace --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Generate bash completions\n" "$(green "completions")          "
  printf "  %s   Register autocompletion for workspace CLI in .bashrc file\n" "$(green "register-autocomplete")"
  printf "  %s   Upgrade workspace CLI to latest version\n" "$(green "upgrade")              "
  printf "  %s   Install and configure git toolkit\n" "$(green "git")                  "
  printf "  %s   Install docker\n" "$(green "docker")               "
  printf "  %s   Install and configure pluggable authentication module (PAM) howdy for facial recognition\n" "$(green "howdy")                "
  printf "  %s   minikube installation and configuration\n" "$(green "minikube")             "
  printf "  %s   Kubernetes CLI tools installation and configuration\n" "$(green "kube-tools")           "
  printf "  %s   Visual Studio Code installation and configuration\n" "$(green "vscode")               "
  printf "  %s   Install and configure vals\n" "$(green "vals")                 "
  printf "  %s   System maintenance utilities\n" "$(green "system")               "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.footer
    printf "MIT License: https://github.com/kostiantyn-matsebora/workspace-cli/blob/master/LICENSE\nCopyright (c) 2024 Kostiantyn Matsebora\n"
    echo

  fi
}

# :command.usage
workspace_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "workspace completions\n\n"
    printf "  Generate bash completions\n  Usage: eval \"\$(workspace completions)\"\n\n"
  else
    printf "workspace completions - Generate bash completions\n\n"
  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace completions\n"
  printf "  workspace completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_register_autocomplete_usage() {
  printf "workspace register-autocomplete - Register autocompletion for workspace CLI in .bashrc file\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace register-autocomplete\n"
  printf "  workspace register-autocomplete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_upgrade_usage() {
  printf "workspace upgrade - Upgrade workspace CLI to latest version\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace upgrade [OPTIONS]\n"
  printf "  workspace upgrade --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automaticaly upgrades CLI into $HOME/bin directory, does not require\n    interactive input.\n    Applicable only to --install option. Useful for CI/CD environments and\n    automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_git_usage() {
  printf "workspace git - Install and configure git toolkit\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace git COMMAND\n"
  printf "  workspace git [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Setup Commands:")"
  printf "  %s   Install and configure git toolkit\n" "$(green "setup")  "
  echo
  printf "%s\n" "$(bold "Install Commands:")"
  printf "  %s   Install git toolkit\n" "$(green "install")"
  echo
  printf "%s\n" "$(bold "Configuration Commands:")"
  printf "  %s   Configure git toolkit\n" "$(green "config") "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace git setup // Install and configure git toolkit\n"
    printf "  workspace git install -y // Install git toolkit, automatic mode\n"
    printf "  workspace git config // Configure git toolkit\n"
    echo

  fi
}

# :command.usage
workspace_git_setup_usage() {
  printf "workspace git setup - Install and configure git toolkit\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace git setup\n"
  printf "  workspace git setup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_git_install_usage() {
  printf "workspace git install - Install git toolkit\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace git install [OPTIONS]\n"
  printf "  workspace git install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    --install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_git_config_usage() {
  printf "workspace git config - Configure git toolkit\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace git config\n"
  printf "  workspace git config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_docker_usage() {
  printf "workspace docker - Install docker\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace docker COMMAND\n"
  printf "  workspace docker [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Install Commands:")"
  printf "  %s   Install docker\n" "$(green "install")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace docker install // Install and configure docker\n"
    printf "  workspace docker install -y // Install docker, automatic mode\n"
    echo

  fi
}

# :command.usage
workspace_docker_install_usage() {
  printf "workspace docker install - Install docker\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace docker install [OPTIONS]\n"
  printf "  workspace docker install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_howdy_usage() {
  printf "workspace howdy - Install and configure pluggable authentication module (PAM) howdy for facial recognition\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace howdy COMMAND\n"
  printf "  workspace howdy [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install and configure howdy\n" "$(green "setup")  "
  printf "  %s   Install howdy\n" "$(green "install")"
  printf "  %s   Configure howdy\n" "$(green "config") "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace howdy setup // Install and configure howdy\n"
    printf "  workspace howdy install -y // Install howdy, automatic mode\n"
    printf "  workspace howdy config // Configure howdy\n"
    echo

  fi
}

# :command.usage
workspace_howdy_setup_usage() {
  printf "workspace howdy setup - Install and configure howdy\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace howdy setup\n"
  printf "  workspace howdy setup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_howdy_install_usage() {
  printf "workspace howdy install - Install howdy\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace howdy install [OPTIONS]\n"
  printf "  workspace howdy install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_howdy_config_usage() {
  printf "workspace howdy config - Configure howdy\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace howdy config\n"
  printf "  workspace howdy config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_minikube_usage() {
  printf "workspace minikube - minikube installation and configuration\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace minikube COMMAND\n"
  printf "  workspace minikube [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install minikube\n" "$(green "install")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace minikube install -y // Install k3s in automatic mode\n"
    echo

  fi
}

# :command.usage
workspace_minikube_install_usage() {
  printf "workspace minikube install - Install minikube\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace minikube install [OPTIONS]\n"
  printf "  workspace minikube install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_kube_tools_usage() {
  printf "workspace kube-tools - Kubernetes CLI tools installation and configuration\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace kube-tools COMMAND\n"
  printf "  workspace kube-tools [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install kubernetes tools such as  kubectl, helm, helmfile\n" "$(green "install")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace kube-tools install -y // Install kubernetes CLI tools in automatic\n  mode\n"
    echo

  fi
}

# :command.usage
workspace_kube_tools_install_usage() {
  printf "workspace kube-tools install - Install kubernetes tools such as  kubectl, helm, helmfile\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace kube-tools install [OPTIONS]\n"
  printf "  workspace kube-tools install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_vscode_usage() {
  printf "workspace vscode - Visual Studio Code installation and configuration\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace vscode COMMAND\n"
  printf "  workspace vscode [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install VsCode and shellcheck\n" "$(green "install")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace vscode install -y // Install VsCode and shellcheck in automatic mode\n"
    echo

  fi
}

# :command.usage
workspace_vscode_install_usage() {
  printf "workspace vscode install - Install VsCode and shellcheck\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace vscode install [OPTIONS]\n"
  printf "  workspace vscode install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_vals_usage() {
  printf "workspace vals - Install and configure vals\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace vals COMMAND\n"
  printf "  workspace vals [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install and configure vals\n" "$(green "setup")  "
  printf "  %s   Install vals\n" "$(green "install")"
  printf "  %s   Configure vals for using HashiCorp Vault for getting secrets\n" "$(green "config") "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace vals setup // Install and configure git toolkit\n"
    printf "  workspace vals install -y // Install git toolkit, automatic mode\n"
    printf "  workspace vals config // Configure git toolkit\n"
    echo

  fi
}

# :command.usage
workspace_vals_setup_usage() {
  printf "workspace vals setup - Install and configure vals\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace vals setup\n"
  printf "  workspace vals setup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_vals_install_usage() {
  printf "workspace vals install - Install vals\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace vals install [OPTIONS]\n"
  printf "  workspace vals install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--yes, -y")"
    printf "    Automatic mode, does not require interactive input. Applicable only to\n    --install option. Useful for CI/CD environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_vals_config_usage() {
  printf "workspace vals config - Configure vals for using HashiCorp Vault for getting secrets\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace vals config\n"
  printf "  workspace vals config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_system_usage() {
  printf "workspace system - System maintenance utilities\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace system COMMAND\n"
  printf "  workspace system [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Upgrade system packages to latest version\n" "$(green "upgrade")           "
  printf "  %s   Clean system cache and remove journal logs older than 3 days to free up disk space\n" "$(green "cleanup")           "
  printf "  %s   Beautify grub menu, applicable only for Linux Mint\n" "$(green "beautify-grub-menu")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  workspace system upgrade // Install kubernetes CLI tools in automatic mode\n"
    echo

  fi
}

# :command.usage
workspace_system_upgrade_usage() {
  printf "workspace system upgrade - Upgrade system packages to latest version\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace system upgrade\n"
  printf "  workspace system upgrade --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_system_cleanup_usage() {
  printf "workspace system cleanup - Clean system cache and remove journal logs older than 3 days to free up disk space\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace system cleanup\n"
  printf "  workspace system cleanup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
workspace_system_beautify_grub_menu_usage() {
  printf "workspace system beautify-grub-menu - Beautify grub menu, applicable only for Linux Mint\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  workspace system beautify-grub-menu\n"
  printf "  workspace system beautify-grub-menu --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# ./src/features/accounts/sync_onedrive.sh
#!/bin/bash

sync_onedrive() {
	onedrive --skip-dir "Docs|Pictures" --synchronize --download-only
}

# ./src/features/cli/install_bashly.sh
#!/bin/bash

install_bashly() {
	echo_info "Configure shell to run bashly commands as a Docker container"

	echo "alias bashly='docker run --rm -it --volume "$PWD:/app" dannyben/bashly'" >> ~/.bashrc
	source ~/.bashrc
}

# ./src/features/containerization/install_docker.sh
#!/bin/bash

install_docker() {

    AUTOMATIC_MODE=$(is_automatic_mode "$1")

    echo_info "Installing and configuring docker"

    yes_or_no "Do you want to install docker ?" "$AUTOMATIC_MODE"

    if [ $? -eq 0 ]

    then
        echo_message "Installing docker"
        # Add Docker's official GPG key:
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        # Add the repository to Apt sources:
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
        exit_if_error "Error setting up docker"
    fi
}

# ./src/features/containerization/install_kubernetes_toolkit.sh
#!/bin/bash

# Supported modes:
#  - interactive
#  - automatic
install_kubernetes_toolkit() {
  AUTOMATIC_MODE=$(is_automatic_mode "$1")
  echo_info "Installing  and configuring kubernetes tools."

  INSTALL_KUBECTL=0
  if [ -e /usr/local/bin/kubectl ]
  then
  echo_message "Kubectl is already installed."
  yes_or_no "Do you want to reinstall/upgrade kubectl?" "$AUTOMATIC_MODE"
  INSTALL_KUBECTL=$?
  fi

  if [[ "$INSTALL_KUBECTL" = "0" ]]
  then
      echo_message "Installing kubectl"
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" &&
      sudo mv ./kubectl /usr/local/bin &&
      chmod +x /usr/local/bin/kubectl
      exit_if_error "Error installing kubectl"
  fi

  if [ -e /usr/local/bin/kubectl ]
  then
    echo_message "Configuring kubectl autocompletion"
    kubectl completion bash > ~/.kubectl_completion &&
    echo "source ~/.kubectl_completion" >> ~/.bashrc &&
    source ~/.kubectl_completion
    exit_if_error "Error configuring kubectl autocompletion"
  fi

  INSTALL_HELM=0

  if [ -e /usr/local/bin/helm ]
  then
  echo_message "Helm is already installed."
  yes_or_no "Do you want to reinstall/upgrade helm?" "$AUTOMATIC_MODE"
  INSTALL_HELM=$?
  fi

  # Install helm
  if [[ "$INSTALL_HELM" = "0" ]]
  then
      echo_message "Installing helm"
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 &&
      chmod 700 get_helm.sh &&
      ./get_helm.sh
      exit_if_error "Error installing helm"

      echo_message "Cleaning up"
      rm -f get_helm.sh
  fi

  # Configure helm completion
  if [ -e /usr/local/bin/helm ]
  then
    echo_message "Configuring helm autocompletion"
    helm completion bash > ~/.helm_completion &&
    echo "source ~/.helm_completion" >> ~/.bashrc &&
    source ~/.helm_completion
    exit_if_error "Error configuring helm autocompletion"
  fi

  # Install and configure helmfile
  INSTALL_HELMFILE=0

  if [ -e /usr/local/bin/helmfile ]
  then
  echo_message "Helmfile is already installed."
  yes_or_no "Do you want to reinstall/upgrade helmfile?" "$AUTOMATIC_MODE"
  INSTALL_HELMFILE=$?
  else

  yes_or_no "Do you want to install helmfile?" "$AUTOMATIC_MODE"
  INSTALL_HELMFILE=$?
  fi

  if [[ "$INSTALL_HELMFILE" = "0" ]]
  then
      echo_message "Installing helmfile"
      HELMFILE_URL="https://github.com/helmfile/helmfile/releases/download/v0.168.0/helmfile_0.168.0_linux_amd64.tar.gz"

      DEST_DIR="/usr/local/bin"
      curl -L $HELMFILE_URL -o helmfile.tar.gz &&
      sudo tar -xzf helmfile.tar.gz -C $DEST_DIR &&
      rm helmfile.tar.gz
      exit_if_error "Error installing helmfile"
  fi
}

# ./src/features/containerization/install_minikube.sh
#!/bin/bash

install_minikube() {
    AUTOMATIC_MODE=$(is_automatic_mode "$1")

    echo_info "Install minikube"

    # Install minikube (driver=docker runtime=containerd)
    yes_or_no "Do you want to install minikube (driver=docker containerd and all depedencies?" "$AUTOMATIC_MODE"

    if [[ $? -eq 0 ]]
    then
        INSTALL_MINIKUBE=0

        if [ -e /usr/local/bin/minikube ]
        then
        echo_message "Minikube is already installed."
        yes_or_no "Do you want to reinstall minikube?" "$AUTOMATIC_MODE"
        INSTALL_MINIKUBE=$?
        fi

        if [[ "$INSTALL_MINIKUBE" = "0" ]]
        then
            echo_message "Installing Minikube"
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            sudo install minikube-linux-amd64 /usr/local/bin/minikube &&

            rm minikube-linux-amd64 &&

            echo_message "Making docker default driver for minikube" &&
            minikube config set driver docker &&

            echo_message "Making containerd default container runtime for minikube" &&
            minikube config set container-runtime containerd

            exit_if_error "Error installing and configuring Minikube"
        fi

        echo_message "Minikube installation and configuration is completed."
        echo_message "If you already have VMs, you need to delete them using command: minikube delete"
        echo_message "To run minikube, use command: minikube start"
    fi
}

# ./src/features/git/configure_git.sh
#!/bin/bash

configure_git() {
    echo_info "Configure git"

    yes_or_no "Do you want to set global username and email for git?"
    if [ $? -eq 0 ]
    then
        USERNAME=$(read_input "Enter your username: ")
        git config --global user.name "$USERNAME"
        exit_if_error "Error setting global username"

        EMAIL=$(read_input "Enter your email: ")
        git config --global user.email "$EMAIL"
        exit_if_error "Error setting global email"
    fi
}

# ./src/features/git/install_git_toolkit.sh
#!/bin/bash


# Include functions
install_git_toolkit() {
    echo "$1"
    AUTOMATIC_MODE=$(is_automatic_mode "$1")

    echo_info "Installing git and github CLI"

    yes_or_no "Do you want to install git?" "$AUTOMATIC_MODE"

    if [[ $? -eq 0 ]]
    then
        echo_message "Installing git"
        sudo apt install git -y
    else
        echo_message "Skipping git installation"
    fi
    exit_if_error "Error installing git"

    yes_or_no "Do you want to install github CLI?" "$AUTOMATIC_MODE"

    if [[ $? -eq 0 ]]
    then
        echo_message "Installing github CLI"
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0 &&
        sudo apt-add-repository https://cli.github.com/packages -y &&
        sudo apt update && -y
        sudo apt install gh -y
    else
        echo_message "Skipping github CLI installation"
    fi

    if [ $AUTOMATIC_MODE -eq 0 ]
    then
        exit 0
    fi

}

# ./src/features/howdy/configure_howdy.sh
#!/bin/bash


function configure_howdy() {
    echo_info "Configure howdy"

    yes_or_no "Do you want to change device path for howdy?"
    if [ $? -eq 0 ]
    then
        DEVICE_PATH=$(read_input "Enter your device path: ")
        sudo sed -i "s|DevicePath = /dev/video0|DevicePath = $DEVICE_PATH|g" /lib/systemd/system/howdy.service
        exit_if_error "Error changing device path"
    fi

    yes_or_no "Do you want to add face recognition for howdy?"

    while [ $? -eq 0 ]
    do
        sudo howdy add
        exit_if_error "Error adding face recognition"
        yes_or_no "Do you want to add face recognition for howdy?"

    done
    echo_info "If you added face recognition, please restart your computer"

}

# ./src/features/howdy/install_howdy.sh
#!/bin/bash


install_howdy() {
    echo_info "Install howdy and v4l-utils"

    yes_or_no "Do you want to install howdy?" "$AUTOMATIC_MODE"
    if [[ $? -eq 0 ]]
    then
        sudo add-apt-repository ppa:boltgolt/howdy
        sudo apt update
        sudo apt install howdy -y
        echo_message "Installing howdy"
    else
        echo_message "Skipping howdy installation"
        return
    fi

    yes_or_no "Do you want to install v4l-utils?" "$AUTOMATIC_MODE"
    if [[ $? -eq 0 ]]
    then
        echo_message "Installing v4l-utils"
        sudo apt install v4l-utils -y
    else
        echo_message "Skipping v4l-utils installation"
    fi
}

# ./src/features/ide/install_vscode.sh
#!/bin/bash

install_vscode() {
    AUTOMATIC_MODE=$(is_automatic_mode "$1")

    echo_info "Installing and configuring VSCode"

    yes_or_no "Do you want to install VSCode?" "$AUTOMATIC_MODE"
    if [[ $? -eq 0 ]]
    then
        echo_message "Installing VSCode"
        sudo apt-get install  -y wget gpg
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
        echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" |sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null
        rm -f packages.microsoft.gpg

        sudo apt install  -y apt-transport-https
        sudo apt  -y update
        sudo apt install -y code
    else
        echo_message "Skipping VSCode installation"
    fi
    exit_if_error "Error installing VSCode"

    yes_or_no "Do you want to install shellcheck?" "$AUTOMATIC_MODE"

    if [[ $? -eq 0 ]]

    then
        echo_message "Installing shellcheck"
        sudo apt update &&
        sudo apt install -y shellcheck
    else
        echo_message "Skipping shellcheck installation"
    fi
}

# ./src/features/secrets/configure_vals_vault.sh
#!/bin/bash

configure_vals_vault() {
    echo_info "Configure vals for using Hashicorp Vault as secrets store"

    yes_or_no "Do you want to vals for using Hashicorp Vault as secrets store?"

    if [[ $? -eq 0 ]]
    then
        # Prompt the user for Vault URL and token
        VAULT_ADDR=$(read_input "Enter Hashicorp Vault URL: ")
        VAULT_TOKEN=$(read_input "Enter Vault Token: ")

        # Add the environment variables to .bashrc
        echo "export VAULT_ADDR=$VAULT_ADDR" >> ~/.bashrc
        echo "export VAULT_TOKEN=$VAULT_TOKEN" >> ~/.bashrc
        echo "export VAULT_AUTH_METHOD=token" >> ~/.bashrc

        # Inform the user
        echo "Vault URL and token have been added to ~/.bashrc"

        # Source the .bashrc to apply changes immediately
        source ~/.bashrc
    fi
}

# ./src/features/secrets/install_vals.sh
#!/bin/bash

install_vals() {
    AUTOMATIC_MODE=$(is_automatic_mode "$1")
    echo_info "Install vals (https://github.com/helmfile/vals)"

    INSTALL_VALS=0

    if [ -e /usr/local/bin/vals ]
    then
    echo_message "Vals is already installed."
    yes_or_no "Do you want to reinstall/upgrade vals?" "$AUTOMATIC_MODE"
    INSTALL_VALS=$?
    else

    yes_or_no "Do you want to install vals?" "$AUTOMATIC_MODE"
    INSTALL_VALS=$?
    fi

    if [[ "$INSTALL_VALS" = "0" ]]
    then
        echo_message "Installing vals"
        VALS_URL="https://github.com/helmfile/vals/releases/download/v0.37.5/vals_0.37.5_linux_amd64.tar.gz"
        DEST_DIR="/usr/local/bin"
        curl -L $VALS_URL -o vals.tar.gz &&
        sudo tar -xzf vals.tar.gz -C $DEST_DIR &&
        rm vals.tar.gz
        exit_if_error "Error installing vals"
    fi
}

# ./src/features/system/cleanup_system.sh
#! /bin/bash

cleanup_system() {
    AUTOMATIC_MODE=$(is_automatic_mode "$1")
    # Running autoremove to remove unnecessary packages
    echo "Running autoremove"
    sudo apt-get autoremove -y

    # Removing apt package cache
    echo "Removing apt package cache"
    sudo apt-get clean

    # Getting the size of journalctl logs
    echo "Getting the size of journalctl logs"
    journalctl --disk-usage

    yes_or_no "Do you really want to remove journalctl logs older than 3 days?" "$AUTOMATIC_MODE"
    if [[ $? -eq 0 ]]
    then
        # Removing journalctl logs older than 3 days
        echo "Removing journalctl logs older than 3 days"
        sudo journalctl --vacuum-time=3d
    fi

    # Getting list of timeshift snapshots
    if [ -e /usr/bin/timeshift ]
    then
        echo "Getting list of timeshift snapshots"
        sudo timeshift --list

        echo "Use timeshift delete --snapshot 'snapshot_name' to delete a snapshot"
        echo "Also you can use sudo rm -rfv /timeshift/snapshots/snapshot_name to delete a snapshot"
    fi

}

# ./src/features/system/configure_grub_menu.sh
#!/bin/bash


configure_grub_menu() {
    echo_info "Beautify Grub menu"

    yes_or_no "Do you want to beautify Grub menu?"

      if [[ $? -eq 0 ]]
    then
        echo_message "Beautify Grub menu for Linux Mint"
        sudo apt install --reinstall -o Dpkg::Options::="--force-confmiss" grub2-theme-mint2k
    fi
}

# ./src/features/system/upgrade_system.sh
#! /bin/bash

upgrade_system() {
    echo_message "Update packages to latest version"
    yes_or_no "Do you really want to upgrade packages to latest version?"

    if [[ $? -eq 0 ]]
    then
        sudo apt update && sudo apt upgrade -y
        exit_if_error "Error occured during update of system"
    fi
}

# ./src/features/workspace/register_autocomplete.sh
#!/bin/bash

register_autocomplete() {

echo_info 'Registering autocomplete'
# shellcheck disable=SC2016
echo  'eval "$(workspace completions)"' >> "$HOME/.bashrc"
echo_info 'Autocomplete registered successfully'
}

# ./src/features/workspace/upgrade.sh
#!/bin/bash
upgrade_workspace() {
  AUTOMATIC_MODE=$(is_automatic_mode "$1")

  echo_info "Upgrading workspace $(workspace --version)"
  local WORKSPACE_HOME_PATH="$HOME/bin"
  local WORKSPACE_PATH="$WORKSPACE_HOME_PATH"
  if [[ $AUTOMATIC_MODE != "0" ]]
  then
    WORKSPACE_PATH="$(question "Enter the path where workspace is installed ($WORKSPACE_HOME_PATH as default): ")"
    if [ -z "$WORKSPACE_PATH" ]
    then
        WORKSPACE_PATH="$WORKSPACE_HOME_PATH"
    fi
  fi
  echo_message "Upgrading workspace at $WORKSPACE_PATH"
  wget https://raw.githubusercontent.com/kostiantyn-matsebora/workspace-cli/master/release/workspace -O "$WORKSPACE_PATH/workspace"
  chmod +x "$WORKSPACE_PATH/workspace"
  exit_if_error "Error upgrading workspace"
  echo_info "Workspace upgraded successfully to version $(workspace --version)"
}

# ./src/functions/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# ./src/functions/setup.sh
#!/bin/bash

setup_git_toolkit() {
    install_git_toolkit $1 &&
    config_git
}

setup_kubernetes_toolkit() {
    install_kubernetes_toolkit $1 &&

    config_kubeconfig

}

setup_k3s() {
    install_k3s $1 &&

    apply_k3s_config

}

setup_vals() {
    install_vals $1 &&
    config_vals_vault
}

# ./src/functions/shared.sh
#!/bin/bash

timestamp() {
  date +%F_%T # current date and time
}

green() {
    echo -e "\033[0;32m$1\033[0m"
}

yellow_bold() {
    echo -e "\033[1;33m$1\033[0m"
}

red() {
    echo -e "\033[0;31m$1\033[0m"
}

green_bold() {
    echo -e "\033[1;92m$1\033[0m"
}

echo_message(){
    echo -e "$(green "[$(timestamp)] $1\n")"
}

echo_info(){
    echo -e "\n"
    echo -e "$(yellow_bold "[$(timestamp)] $1\n")"

}

echo_error(){
    echo -e "$(red "[$(timestamp)] $1\n")"
    echo -e "\n"
}

function question(){
    local MESSAGE
    MESSAGE=$(green_bold "[$(timestamp)] $1")

    read -sn 1 -r -p "$MESSAGE" ANSWER
    echo  "$ANSWER"
}

function read_input(){
    local MESSAGE
    MESSAGE=$(green_bold "[$(timestamp)] $1")

    read -r -p "$MESSAGE" ANSWER
    echo  "$ANSWER"
}

function read_input(){
    local MESSAGE
    MESSAGE=$(green_bold "[$(timestamp)] $1")

    read -r -p "$MESSAGE" ANSWER
    echo  "$ANSWER"
}

function exit_if_error(){
    if [ "$?" -ne "0" ]
    then
        echo_error "$1"
        exit $?
    fi
}

function yes_or_no(){
    if [[ "$2" == "0" ]]
    then
        return 0
    fi

    local ANSWER
    ANSWER=$(question "$1 [y/n]")
    echo "$ANSWER"
    if [[ "$ANSWER" = "y" || "$ANSWER" = "Y" ]]
    then
        return 0
    else
        return 1
    fi
}

function exit_if_answer_no() {
    if [[ $? -ne 0 ]]
    then
        echo_message "Exiting..."
        exit 0
    fi
}

function is_automatic_mode(){
    if [[ "$1" == "--yes" || "$1" == "-y" ]]
    then
        echo 0
    else
        echo 1
    fi
}

function press_any_key(){
    read -n 1 -s -r -p "Press any key to continue..."
}

# ./src/functions/workspace.sh
#!/bin/bash
workspace_app() {
    local WORKSPACE_APP="${args[application]}"
    echo "$WORKSPACE_APP"
}

workspace_yes() {
    if [ -z "${args[--yes]}" ]; then
        return
    else

        echo "--yes"
    fi
}

workspace_setup_flag() {
    echo "${args[--setup]}"
}

workspace_install_flag() {
    echo "${args[--install]}"

}

workspace_config_flag() {
    echo "${args[--config]}"
}

workspace_distro() {
    local WORKSPACE_DISTRO="${args[distro]}"
    echo "$WORKSPACE_DISTRO"
}

# ./src/send_completions.sh
send_completions() {
  echo $'# workspace completion                                     -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_workspace_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $''
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_workspace_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'system beautify-grub-menu\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'register-autocomplete\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kube apply-k3s-config\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kube-tools install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kube show-config\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'system cleanup\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'system upgrade\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'vscode install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'docker install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'howdy install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'vals install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kube install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y k3s minikube")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'howdy config\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'vals config\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'howdy setup\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'git install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'git config\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kube-tools\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h install")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'vals setup\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'git setup\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'upgrade\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'install\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y all docker git k3s kube-tools minikube vals vscode")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'docker\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h install")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'config\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h all git kubeconfig vals")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'system\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h beautify-grub-menu cleanup upgrade")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'vscode\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h install")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'howdy\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h config install setup")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'setup\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h all docker git k3s kube-tools minikube vals vscode")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'kube\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h apply-k3s-config install show-config")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'vals\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h config install setup")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'git\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h config install setup")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'i\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --yes -h -y all docker git k3s kube-tools minikube vals vscode")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'s\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h all docker git k3s kube-tools minikube vals vscode")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'c\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help -h all git kubeconfig vals")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_workspace_completions_filter "--help --version -h -v c completions config docker git howdy i install kube kube-tools register-autocomplete s setup system upgrade vals vscode")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'  complete -F _workspace_completions workspace'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
workspace_completions_command() {

  # ./bashly/commands/completions.sh
  #!/bin/bash
  send_completions

}

# :command.function
workspace_register_autocomplete_command() {

  # ./bashly/commands/register-autocomplete.sh
  #!/bin/bash
  register_autocomplete

}

# :command.function
workspace_upgrade_command() {

  # ./bashly/commands/upgrade.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  upgrade_workspace "$WORKSPACE_YES"

}

# :command.function
workspace_git_setup_command() {

  # ./bashly/commands/git/setup.sh
  #!/bin/bash
  install_git_toolkit
  configure_git

}

# :command.function
workspace_git_install_command() {

  # ./bashly/commands/git/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  install_git_toolkit "$WORKSPACE_YES"

}

# :command.function
workspace_git_config_command() {

  # ./bashly/commands/git/config.sh
  #!/bin/bash
  configure_git

}

# :command.function
workspace_docker_install_command() {

  # ./bashly/commands/docker/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  install_rootless_docker "$WORKSPACE_YES"

}

# :command.function
workspace_howdy_setup_command() {

  # ./bashly/commands/howdy/setup.sh
  #!/bin/bash
  install_howdy
  configure_howdy

}

# :command.function
workspace_howdy_install_command() {

  # ./bashly/commands/howdy/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  install_howdy "$WORKSPACE_YES"

}

# :command.function
workspace_howdy_config_command() {

  # ./bashly/commands/howdy/config.sh
  #!/bin/bash
  configure_howdy

}

# :command.function
workspace_minikube_install_command() {

  # ./bashly/commands/minikube/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"

  install_minikube "$WORKSPACE_YES"

}

# :command.function
workspace_kube_tools_install_command() {

  # ./bashly/commands/kube-tools/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  install_kubernetes_toolkit "$WORKSPACE_YES"

}

# :command.function
workspace_vscode_install_command() {

  # ./bashly/commands/vscode/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  install_vscode "$WORKSPACE_YES"

}

# :command.function
workspace_vals_setup_command() {

  # ./bashly/commands/vals/setup.sh
  #!/bin/bash
  install_vals
  configure_vals_vault

}

# :command.function
workspace_vals_install_command() {

  # ./bashly/commands/vals/install.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  install_vals "$WORKSPACE_YES"

}

# :command.function
workspace_vals_config_command() {

  # ./bashly/commands/vals/config.sh
  #!/bin/bash
  configure_vals_vault

}

# :command.function
workspace_system_upgrade_command() {

  # ./bashly/commands/system/upgrade.sh
  #!/bin/bash
  upgrade_system

}

# :command.function
workspace_system_cleanup_command() {

  # ./bashly/commands/system/cleanup.sh
  #!/bin/bash
  WORKSPACE_YES="$(workspace_yes)"
  cleanup_system "$WORKSPACE_YES"

}

# :command.function
workspace_system_beautify_grub_menu_command() {

  # ./bashly/commands/system/beautify-grub-menu.sh
  #!/bin/bash
  configure_grub_menu

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        workspace_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    completions)
      action="completions"
      shift
      workspace_completions_parse_requirements "$@"
      shift $#
      ;;

    register-autocomplete)
      action="register-autocomplete"
      shift
      workspace_register_autocomplete_parse_requirements "$@"
      shift $#
      ;;

    upgrade)
      action="upgrade"
      shift
      workspace_upgrade_parse_requirements "$@"
      shift $#
      ;;

    git)
      action="git"
      shift
      workspace_git_parse_requirements "$@"
      shift $#
      ;;

    docker)
      action="docker"
      shift
      workspace_docker_parse_requirements "$@"
      shift $#
      ;;

    howdy)
      action="howdy"
      shift
      workspace_howdy_parse_requirements "$@"
      shift $#
      ;;

    minikube)
      action="minikube"
      shift
      workspace_minikube_parse_requirements "$@"
      shift $#
      ;;

    kube-tools)
      action="kube-tools"
      shift
      workspace_kube_tools_parse_requirements "$@"
      shift $#
      ;;

    vscode)
      action="vscode"
      shift
      workspace_vscode_parse_requirements "$@"
      shift $#
      ;;

    vals)
      action="vals"
      shift
      workspace_vals_parse_requirements "$@"
      shift $#
      ;;

    system)
      action="system"
      shift
      workspace_system_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_register_autocomplete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_register_autocomplete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="register-autocomplete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_upgrade_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_upgrade_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v wget >/dev/null 2>&1; then
    printf "missing dependency: wget\n" >&2
    missing_deps=1
  else
    deps['wget']="$(command -v wget | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="upgrade"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_git_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_git_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    setup)
      action="setup"
      shift
      workspace_git_setup_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      workspace_git_install_parse_requirements "$@"
      shift $#
      ;;

    config)
      action="config"
      shift
      workspace_git_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_git_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_git_setup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_git_setup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="git setup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_git_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_git_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="git install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_git_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_git_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v git >/dev/null 2>&1; then
    printf "missing dependency: git\n" >&2
    missing_deps=1
  else
    deps['git']="$(command -v git | head -n1)"
  fi

  # :dependency.filter
  if ! command -v ssh-keygen >/dev/null 2>&1; then
    printf "missing dependency: ssh-keygen\n" >&2
    missing_deps=1
  else
    deps['ssh-keygen']="$(command -v ssh-keygen | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="git config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_docker_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_docker_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      workspace_docker_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_docker_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_docker_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_docker_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="docker install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_howdy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_howdy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    setup)
      action="setup"
      shift
      workspace_howdy_setup_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      workspace_howdy_install_parse_requirements "$@"
      shift $#
      ;;

    config)
      action="config"
      shift
      workspace_howdy_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_howdy_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_howdy_setup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_howdy_setup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="howdy setup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_howdy_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_howdy_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="howdy install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_howdy_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_howdy_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v howdy >/dev/null 2>&1; then
    printf "missing dependency: howdy\n" >&2
    missing_deps=1
  else
    deps['howdy']="$(command -v howdy | head -n1)"
  fi

  # :dependency.filter
  if ! command -v v4l-utils >/dev/null 2>&1; then
    printf "missing dependency: v4l-utils\n" >&2
    missing_deps=1
  else
    deps['v4l-utils']="$(command -v v4l-utils | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="howdy config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_minikube_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_minikube_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      workspace_minikube_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_minikube_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_minikube_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_minikube_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="minikube install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_kube_tools_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_kube_tools_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      workspace_kube_tools_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_kube_tools_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_kube_tools_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_kube_tools_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="kube-tools install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_vscode_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_vscode_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      workspace_vscode_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_vscode_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_vscode_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_vscode_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="vscode install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_vals_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_vals_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    setup)
      action="setup"
      shift
      workspace_vals_setup_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      workspace_vals_install_parse_requirements "$@"
      shift $#
      ;;

    config)
      action="config"
      shift
      workspace_vals_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_vals_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_vals_setup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_vals_setup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="vals setup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_vals_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_vals_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="vals install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_vals_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_vals_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v vals >/dev/null 2>&1; then
    printf "missing dependency: vals\n" >&2
    missing_deps=1
  else
    deps['vals']="$(command -v vals | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="vals config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_system_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_system_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    upgrade)
      action="upgrade"
      shift
      workspace_system_upgrade_parse_requirements "$@"
      shift $#
      ;;

    cleanup)
      action="cleanup"
      shift
      workspace_system_cleanup_parse_requirements "$@"
      shift $#
      ;;

    beautify-grub-menu)
      action="beautify-grub-menu"
      shift
      workspace_system_beautify_grub_menu_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_system_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_system_upgrade_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_system_upgrade_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system upgrade"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_system_cleanup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_system_cleanup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system cleanup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_system_beautify_grub_menu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        workspace_system_beautify_grub_menu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="system beautify-grub-menu"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  declare -g version="0.8.1"

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "completions") workspace_completions_command ;;
    "register-autocomplete") workspace_register_autocomplete_command ;;
    "upgrade") workspace_upgrade_command ;;
    "git") workspace_git_command ;;
    "git setup") workspace_git_setup_command ;;
    "git install") workspace_git_install_command ;;
    "git config") workspace_git_config_command ;;
    "docker") workspace_docker_command ;;
    "docker install") workspace_docker_install_command ;;
    "howdy") workspace_howdy_command ;;
    "howdy setup") workspace_howdy_setup_command ;;
    "howdy install") workspace_howdy_install_command ;;
    "howdy config") workspace_howdy_config_command ;;
    "minikube") workspace_minikube_command ;;
    "minikube install") workspace_minikube_install_command ;;
    "kube-tools") workspace_kube_tools_command ;;
    "kube-tools install") workspace_kube_tools_install_command ;;
    "vscode") workspace_vscode_command ;;
    "vscode install") workspace_vscode_install_command ;;
    "vals") workspace_vals_command ;;
    "vals setup") workspace_vals_setup_command ;;
    "vals install") workspace_vals_install_command ;;
    "vals config") workspace_vals_config_command ;;
    "system") workspace_system_command ;;
    "system upgrade") workspace_system_upgrade_command ;;
    "system cleanup") workspace_system_cleanup_command ;;
    "system beautify-grub-menu") workspace_system_beautify_grub_menu_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
