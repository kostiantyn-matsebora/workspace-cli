#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
workspace_usage() {
  printf "workspace - Workspace cli\n\n"

  printf "%s\n" "Usage:"
  printf "  workspace COMMAND\n"
  printf "  workspace [COMMAND] --help | -h\n"
  printf "  workspace --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Setup (install and configure) workspace. Some of steps require interactive input, so this command cannot be used in CI/CD environments and automation scripts.\n" "setup  "
  printf "  %s   Configure workspace. Applications needs to be already installed. Some of steps require interactive input, so this command cannot be used in CI/CD environments and automation scripts.\n" "config "
  printf "  %s   Install applications and tools required for workspace. Does not require interactive input, so this command cannot be used in CI/CD environments and automation scripts.\n" "install"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
workspace_setup_usage() {
  if [[ -n $long_usage ]]; then
    printf "workspace setup\n\n"
    printf "  Setup (install and configure) workspace. Some of steps require interactive\n  input, so this command cannot be used in CI/CD environments and automation\n  scripts.\n\n"
  else
    printf "workspace setup - Setup (install and configure) workspace. Some of steps require interactive input, so this command cannot be used in CI/CD environments and automation scripts.\n\n"
  fi
  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  workspace setup [APPLICATION]\n"
  printf "  workspace setup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "APPLICATION"
    printf "    Application  or toolkit needs to be setup. Possible values: all, git,\n    docker, k3s, minikube, kube-tools, vscode, vals\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  workspace setup git // Install and configure git\n"
    printf "  workspace setup all // Install and configure all applications\n"
    echo

  fi
}

# :command.usage
workspace_config_usage() {
  printf "workspace config - Configure workspace. Applications needs to be already installed. Some of steps require interactive input, so this command cannot be used in CI/CD environments and automation scripts.\n\n"
  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  workspace config [APPLICATION]\n"
  printf "  workspace config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "APPLICATION"
    printf "    Application or toolkit needs to be configured. Possible values: all, git,\n    kubeconfig, vals.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  workspace config git // Configuregit\n"
    printf "  workspace config all // Configure all applications\n"
    echo

  fi
}

# :command.usage
workspace_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "workspace install\n\n"
    printf "  Install applications and tools required for workspace. Does not require\n  interactive input, so this command cannot be used in CI/CD environments and\n  automation scripts.\n\n"
  else
    printf "workspace install - Install applications and tools required for workspace. Does not require interactive input, so this command cannot be used in CI/CD environments and automation scripts.\n\n"
  fi
  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  workspace install [APPLICATION] [OPTIONS]\n"
  printf "  workspace install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--yes, -y"
    printf "    Automatic mode, does not require interactive input. Useful for CI/CD\n    environments and automation scripts.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "APPLICATION"
    printf "    Application or toolkit needs to be installed. Possible values: all, git,\n    docker, k3s, minikube, kube-tools, vscode, vals\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  workspace install git // Install git, interactive mode\n"
    printf "  workspace install all -y // Install all applications, automatic mode\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# ./bashly/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# ./bashly/lib/config_func.sh
#! /bin/bash

config_git() {
    . "$WORKSPACE_DIR/scripts/configure_git.sh"
}

config_kubeconfig() {
    . "$WORKSPACE_DIR/scripts/configure_kubeconfig.sh" $1
}

config_vals_vault() {
    . "$WORKSPACE_DIR/scripts/configure_vals_vault.sh"
}

# ./bashly/lib/install_func.sh
#!/bin/bash
install_git() {
    . "$WORKSPACE_DIR/scripts/install_git_toolkit.sh" "$WORKSPACE_AUTOMATIC"
}

install_docker() {
    . "$WORKSPACE_DIR/scripts/install_rootless_docker.sh" "$WORKSPACE_AUTOMATIC"
}

install_k3s() {
    . "$WORKSPACE_DIR/scripts/install_k3s.sh" "$WORKSPACE_AUTOMATIC"
}

install_minikube() {
    . "$WORKSPACE_DIR/scripts/install_minikube.sh" "$WORKSPACE_AUTOMATIC"
}

install_kubernetes_toolkit() {
    . "$WORKSPACE_DIR/scripts/install_kubernetes_toolkit.sh" "$WORKSPACE_AUTOMATIC"
}

install_vscode() {
    . "$WORKSPACE_DIR/scripts/install_vscode.sh" "$WORKSPACE_AUTOMATIC"
}

install_vals() {
    . "$WORKSPACE_DIR/scripts/install_vals.sh" "$WORKSPACE_AUTOMATIC"
}

# ./bashly/lib/setup_func.sh
#!/bin/bash

setup_git() {
    install_git &&
    config_git
}

setup_kubernetes_toolkit() {
    install_kubernetes_toolkit &&

    config_kubeconfig

}

setup_k3s() {
    install_k3s &&

    config_kubeconfig

}

setup_vals() {
    install_vals &&
    config_vals_vault
}

# ./bashly/lib/shared_func.sh
workspace_dir() {
    local WORKSPACE_DIR="${BASH_SOURCE%/*}"
    if [[ ! -d "$WORKSPACE_DIR" ]]; then $WORKSPACE_DIR="$PWD"; fi
    echo $WORKSPACE_DIR
}

workspace_app() {
    local WORKSPACE_APP="${args[application]}"
    echo $WORKSPACE_APP
}

workspace_yes() {
    local WORKSPACE_YES="${args[--yes]}"
    echo $WORKSPACE_YES
}

workspace_automatic() {
  local WORKSPACE_YES="$(workspace_yes)"

  if [[ $WORKSPACE_YES == "1" ]]; then
    local WORKSPACE_AUTOMATIC="-y"
  fi
  echo $WORKSPACE_AUTOMATIC
}

# :command.command_functions
# :command.function
workspace_setup_command() {
  # ./bashly/commands/setup.sh
  #!/bin/bash
  inspect_args
  WORKSPACE_DIR="$(workspace_dir)"

  WORKSPACE_APP="$(workspace_app)"
  WORKSPACE_YES="$(workspace_yes)"
  WORKSPACE_AUTOMATIC="$(workspace_automatic)"

  case "$WORKSPACE_APP" in
    "git")
      setup_git
      ;;
    "docker")
      install_docker
      ;;
    "k3s")
      setup_k3s
      ;;
    "minikube")
       install_minikube
       ;;
    "kube-tools")
       setup_kubernetes_toolkit
       ;;
    "vals")
       setup_vals
       ;;

    "vscode")
       install_vscode
       ;;
    "all")
       setup_git &&
       install_vscode &&
       install_docker &&
       setup_k3s &&
       setup_kubernetes_toolkit &&
       setup_vals
  esac

}

# :command.function
workspace_config_command() {
  # ./bashly/commands/config.sh
  #!/bin/bash
  WORKSPACE_DIR="$(workspace_dir)"
  WORKSPACE_APP="$(workspace_app)"

  case "$WORKSPACE_APP" in
    "git")
      # Configure git
      config_git
      ;;
    "kubeconfig")
      # Configure kubernetes config file
      config_kubeconfig
      ;;
    "vals")
      # Configure vals for using Hashicorp Vault as secrets store
      config_vals
      ;;
    "all")
      config_git
      config_kubeconfig
      config_vals
      ;;
  esac

}

# :command.function
workspace_install_command() {
  # ./bashly/commands/install.sh
  inspect_args

  WORKSPACE_DIR="$(workspace_dir)"

  WORKSPACE_APP="$(workspace_app)"
  WORKSPACE_YES="$(workspace_yes)"
  WORKSPACE_AUTOMATIC="$(workspace_automatic)"

  case "$WORKSPACE_APP" in
    "git")
      install_git
      ;;
    "docker")
      install_docker
      ;;
    "k3s")
      install_k3s
      ;;
    "minikube")
       install_minikube
       ;;
    "kube-tools")
       install_kubernetes_toolkit
       ;;
    "vals")
       install_vals
       ;;

    "vscode")
       install_vscode
       ;;
    "all")
       install_git &&
       install_vscode &
       install_docker &&
       install_k3s &&
       install_kubernetes_toolkit &&
       install_vals
  esac

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        workspace_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    setup | s)
      action="setup"
      shift
      workspace_setup_parse_requirements "$@"
      shift $#
      ;;

    config | c)
      action="config"
      shift
      workspace_config_parse_requirements "$@"
      shift $#
      ;;

    install | i)
      action="install"
      shift
      workspace_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      workspace_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_setup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        workspace_setup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="setup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['application']+x} ]]; then
          args['application']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        workspace_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['application']+x} ]]; then
          args['application']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
workspace_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        workspace_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --yes | -y)

        # :flag.case_no_arg
        args['--yes']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['application']+x} ]]; then
          args['application']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "setup") workspace_setup_command ;;
    "config") workspace_config_command ;;
    "install") workspace_install_command ;;
  esac
}

initialize
run "$@"
